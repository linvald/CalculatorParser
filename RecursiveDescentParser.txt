
1) Express grammar in EBNF, with a single production rule for each nonterminal symbol
	- remove left recursion...left factorize

2) Transcribe each EBNF production rule N::=X to a parsing method parseN, whose body is determined by X

3) make the parser consist of
	- a private var currentToken
	- private parsing methods developed in step 2
	- private auxilliary methods accept and acceptIt both of which call the scanner
	- public parse method that calls parseS (where S is the start symbol of the grammar) having first called 
	the scanner to store the first input token in currentToken

Grammar:	
Command		::= Expression =
Expression	::= Numeral ((+|-|*) Numeral)*
Numeral		::= Digit Digit*
Digit		::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9	